name: Build ARM QEMU

on:
  workflow_dispatch:
    branches:
      - main

jobs:

  build:

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        base_image: [
          "balenalib/raspberrypi4-64-ubuntu-python:3.9-jammy-build",
          "balenalib/raspberrypi4-64-ubuntu-python:3.10-jammy-build",
          "balenalib/raspberrypi4-64-ubuntu-python:3.11-jammy-build"
        ]

    steps:
      - name: Setup cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.ccache
          key: build_v1_${{ matrix.base_image }}

      - uses: actions/checkout@v3
      - uses: uraimo/run-on-arch-action@v2.5.0
        name: Run commands
        id: runcmd
#       ghcr.io/<github_user>/<github_repo>/run-on-arch-<github_user>-<github_repo>-<workflow_name>-<arch>-<distro>
        with:
          env: |
            GITHUB_WORKFLOW: ${{ matrix.base_image }}
          arch: aarch64
          distro: none
          base_image: ${{ matrix.base_image }}
          githubToken: ${{ github.token }}
          # Create cached/volume directories on host
          setup: |
            mkdir -p ~/.ccache

          # Mount cached directories in the container for faster builds
          dockerRunArgs: |
            --volume "${HOME}/.ccache:/root/.ccache" --volume "${PWD}:/repo"

          # Install ccache and gcc/g++ symlinks in the container
          install: |
            apt-get update -q -y
            apt-get install build-essential ccache -q -y
            /usr/sbin/update-ccache-symlinks
            echo 'export PATH="/usr/lib/ccache:$PATH"' | tee -a ~/.bashrc
                     
            export PATH="/usr/lib/ccache:$PATH"
            export CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)
            pip install cmake auditwheel patchelf wheel
            echo 'CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)' | tee -a ~/.bashrc
            mkdir /wheelhouse
            pip wheel z3-solver==4.12.1.0 -w /wheelhouse -v

          run: |
            cd /repo
            cp -R /wheelhouse .
            z3wheel=$(ls wheelhouse | head -1)
            auditwheel repair --plat manylinux_2_35_aarch64 wheelhouse/$z3wheel
            
            pip install -r build-requirements.txt
            pip wheel . --no-deps --no-build-isolation -v -w wheelhouse 
            # rm -rf nelli.egg-info && pip install wheelhouse/* && cd tests && pytest *.py

      - name: Copy wheel
        run: |
          mkdir -p ${{ github.sha }}
          cp wheelhouse/*.whl ${{ github.sha }}/

      - name: Upload an artifact
        uses: actions/upload-artifact@v3
        if: github.event_name == 'workflow_dispatch'
        with:
          if-no-files-found: error
          name: build_artifact
          path: ${{ github.sha }}

  upload-tarballs:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    needs: [ build ]

    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build_artifact
          path: ${{ github.sha }}

      - name: Set up a release page
        id: setup_release
        run: |
          NELLI_VERSION=$(python setup.py --version)
          tag_name="$NELLI_VERSION"
          release_title="nelli $NELLI_VERSION"
          echo "nelli $NELLI_VERSION created at $(date)" > body.md
          echo "tag_name=${tag_name}" >> $GITHUB_OUTPUT
          echo "release_title=${release_title}" >> $GITHUB_OUTPUT

      - name: Upload tarballs
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ github.sha }}/*.whl"
          bodyFile: body.md
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: "${{ steps.setup_release.outputs.tag_name }}"
          name: "${{ steps.setup_release.outputs.release_title }}"
          allowUpdates: true
          replacesArtifacts: true


#            apt-get install -y linux-headers-generic
#            wget -q https://developer.download.nvidia.com/compute/cuda/11.7.0/local_installers/cuda_11.7.0_515.43.04_linux_sbsa.run
#            sh cuda_11.7.0_515.43.04_linux_sbsa.run --silent --override --kernel-source-path="/usr/src/$(ls /usr/src | head -1)"-generic
#            if [[ $? -ne 0 ]]; then
#              echo "CUDA Installation Error."
#              exit 1
#            fi
#
#            CUDA_PATH=/usr/local/cuda
#            echo "CUDA_PATH=${CUDA_PATH}"
#            echo 'export CUDA_PATH=${CUDA_PATH}' | tee -a ~/.bashrc
#            echo 'export PATH="$CUDA_PATH/bin:$PATH"' | tee -a ~/.bashrc
#            echo 'export LD_LIBRARY_PATH="$CUDA_PATH/lib:$LD_LIBRARY_PATH"' | tee -a ~/.bashrc
#            echo 'export LD_LIBRARY_PATH="$CUDA_PATH/lib64:$LD_LIBRARY_PATH"' | tee -a ~/.bashrc

